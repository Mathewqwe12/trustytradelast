---
description: 
globs: 
alwaysApply: true
---
## Project Context and Architecture

SYSTEM_CONTEXT: |
Required file reads on startup:
- docs/architecture.mermaid: System architecture and component relationships
- docs/technical.md: Technical specifications, patterns, docs
- docs/status.md: Project progress and state
- docs/backlog.md: Project backlog
- tasks/sprints/: Current development sprints and tasks

Before making any changes:

1. Parse and understand system architecture from docs/architecture.mermaid
2. Check current task context from tasks/tasks.md
3. Update progress in docs/status.md
4. Follow technical specifications from docs/technical.md

# File Management Rules

ON_FILE_CHANGE: |
Required actions after any code changes:

1. READ docs/architecture.mermaid to verify architectural compliance
2. UPDATE docs/status.md with:
   - Current progress
   - Any new issues encountered
   - Completed items
3. VALIDATE changes against docs/technical.md specifications
4. VERIFY task progress against docs/status.md

# Architecture Understanding

READ_ARCHITECTURE: |
File: docs/architecture.mermaid
Required parsing:

1. Load and parse complete Mermaid diagram
2. Extract and understand:
   - Module boundaries and relationships
   - Data flow patterns
   - System interfaces
   - Component dependencies
3. Validate any changes against architectural constraints
4. Ensure new code maintains defined separation of concerns

Error handling:

1. If file not found: STOP and notify user
2. If diagram parse fails: REQUEST clarification
3. If architectural violation detected: WARN user

# Task Management

TASK_WORKFLOW: |
Required files:

- docs/backlog.md: Source of task definitions
- docs/status.md: Progress tracking
- docs/technical.md: Implementation guidelines

Workflow steps:

1. READ tasks/tasks.md:

   - Parse current task requirements
   - Extract acceptance criteria
   - Identify dependencies

2. VALIDATE against docs/architecture.mermaid:

   - Confirm architectural alignment
   - Check component interactions

3. UPDATE docs/status.md:

   - Mark task as in-progress
   - Track completion of sub-tasks
   - Document any blockers

4. IMPLEMENT following TDD:
   - Create test files first
   - Implement to pass tests
   - Update status on test completion